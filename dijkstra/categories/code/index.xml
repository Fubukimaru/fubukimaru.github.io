<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on El Fubu</title>
    <link>http://www.gamerachan.org/fubu/dijkstra/categories/code/</link>
    <description>Recent content in Code on El Fubu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-UK</language>
    <lastBuildDate>Tue, 15 Jun 2021 19:39:47 +0200</lastBuildDate><atom:link href="http://www.gamerachan.org/fubu/dijkstra/categories/code/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Removing Javascript</title>
      <link>http://www.gamerachan.org/fubu/dijkstra/2021-06-15-removing_javascript/</link>
      <pubDate>Tue, 15 Jun 2021 19:39:47 +0200</pubDate>
      
      <guid>http://www.gamerachan.org/fubu/dijkstra/2021-06-15-removing_javascript/</guid>
      <description>Hello!
Probably nobody cares, but I have removed the share section (twitter + facbeook) because it required to load 300kb for the icons plus random javascripts.
We want this to be light.
On the other hand I have removed the &amp;ldquo;last posts&amp;rdquo; from the index. This is because it needed to recompile ALL the posts everytime because this list is always updated. This way&amp;hellip; only the last post needs to be compiled!</description>
    </item>
    
    <item>
      <title>Pyspark and UDF types problem</title>
      <link>http://www.gamerachan.org/fubu/dijkstra/2020-11-02-pyspark_udf_types/</link>
      <pubDate>Mon, 02 Nov 2020 12:20:05 +0100</pubDate>
      
      <guid>http://www.gamerachan.org/fubu/dijkstra/2020-11-02-pyspark_udf_types/</guid>
      <description>Hello!
Here is a fast note that might not be obvious. Beware with UDF types in PySpark.
from pyspark.sql.functions import udf from pyspark.sql.types import IntegerType, FloatType def very_fun(idk): return(22) def floating_fun(idk): return(22.0) df = sqlContext.createDataFrame( [ (1, &#39;foo&#39;), (2, &#39;bar&#39;), ], [&#39;id&#39;, &#39;txt&#39;] ) funfun_int = udf(very_fun, IntegerType()) funfun_float = udf(very_fun, FloatType()) floatingfun_int = udf(floating_fun, IntegerType()) floatingfun_float = udf(floating_fun, FloatType()) df = df.withColumn(&#39;funfun_int&#39;, funfun_int(df[&#39;id&#39;])) df = df.withColumn(&#39;funfun_float&#39;, funfun_float(df[&#39;id&#39;])) df = df.</description>
    </item>
    
    <item>
      <title>Z80 For Loop</title>
      <link>http://www.gamerachan.org/fubu/dijkstra/2017-07-05-msx-for/</link>
      <pubDate>Wed, 05 Jul 2017 08:10:27 +0000</pubDate>
      
      <guid>http://www.gamerachan.org/fubu/dijkstra/2017-07-05-msx-for/</guid>
      <description>WHILE – FOR:
We usually use B as counter.
LD C, 5 LD A, 0 LD B, 100 .NEXT2: push BC LD B, 10 .NEXT: ADD A, C DJNZ .NEXT pop BC DJNZ .NEXT2 </description>
    </item>
    
    <item>
      <title>Leaflet on Jupyter</title>
      <link>http://www.gamerachan.org/fubu/dijkstra/2017-05-19-leaflet-on-jupyter/</link>
      <pubDate>Fri, 19 May 2017 08:10:27 +0000</pubDate>
      
      <guid>http://www.gamerachan.org/fubu/dijkstra/2017-05-19-leaflet-on-jupyter/</guid>
      <description>To do: Improve text. Give examples. Explain stuff, dude…!
You need this package:
https://github.com/ellisonbg/ipyleaflet</description>
    </item>
    
    <item>
      <title>Jupyter Customization: NBSExtensions and themes</title>
      <link>http://www.gamerachan.org/fubu/dijkstra/2017-05-19-jupyter-customization-nbsextensions-and-themes/</link>
      <pubDate>Fri, 19 May 2017 08:07:49 +0000</pubDate>
      
      <guid>http://www.gamerachan.org/fubu/dijkstra/2017-05-19-jupyter-customization-nbsextensions-and-themes/</guid>
      <description>To do: Intro, write the article better.
https://github.com/ipython-contrib/jupyter_contrib_nbextensions
Installing nbsextensions:
sudo pip install jupyter_contrib_nbextensions
Color customization:
Make file ~/.jupyter/custom/custom.css
try: https://github.com/powerpak/jupyter-dark-theme</description>
    </item>
    
    <item>
      <title>SparkR gapply mess</title>
      <link>http://www.gamerachan.org/fubu/dijkstra/2017-05-12-sparkr-gapply-mess/</link>
      <pubDate>Fri, 12 May 2017 08:56:31 +0000</pubDate>
      
      <guid>http://www.gamerachan.org/fubu/dijkstra/2017-05-12-sparkr-gapply-mess/</guid>
      <description>Hello,
Do not assume anything. Never. Ever. Specially with SparkR (Apache Spark 2.1.0).
When using the gapply function, maybe you want to return the key to mark the results in a function as follows:
countRows &amp;lt;- function(key, values) { df &amp;lt;- data.frame(key=key, nvalues=nrow(values)) return(df) } count &amp;lt;- gapplyCollect(data, &amp;quot;keyAttribute&amp;quot;, countRows) countRows &amp;lt;- function(key, values) { df &amp;lt;- data.frame(key=key, nvalues=nrow(values)) return(df) } count &amp;lt;- gapplyCollect(data, &amp;quot;keyAttribute&amp;quot;, countRows) SURPRISE. You can&amp;rsquo;t.
You should get this error:</description>
    </item>
    
    <item>
      <title>asMSX bugfix 1: Ifs on .megarom</title>
      <link>http://www.gamerachan.org/fubu/dijkstra/2016-09-03-asmsx-bugfix-1-ifs-on-megarom/</link>
      <pubDate>Sat, 03 Sep 2016 12:49:45 +0000</pubDate>
      
      <guid>http://www.gamerachan.org/fubu/dijkstra/2016-09-03-asmsx-bugfix-1-ifs-on-megarom/</guid>
      <description>Hello!
Finally some improvements on asMSX. At the start of this project JamQue told me that he had issues using ifs when the “.megarom” clause is active. The issue correction can be seen here in Github.
The problem was that when generating a byte (for example, an LD instruction) it checks if it is able to generate it if the condition established for this level allows it.
Original:
The first if will only affect the if(type!</description>
    </item>
    
    <item>
      <title>Learning Bison and Flex: The calculator</title>
      <link>http://www.gamerachan.org/fubu/dijkstra/2016-08-20-learning-bison-and-flex-the-calculator/</link>
      <pubDate>Sat, 20 Aug 2016 18:28:25 +0000</pubDate>
      
      <guid>http://www.gamerachan.org/fubu/dijkstra/2016-08-20-learning-bison-and-flex-the-calculator/</guid>
      <description>Hello everynyan,
I’m learning how Bison and Flex work with an O’Reilly book and there can be found an example on how to build a calculator (which has an error on the code, probably there are more in the book, that’s why it has that kind of critics, but it works.).
I ended up making an extension on it just to test my forgotten grammar skills. The code is the following:</description>
    </item>
    
    <item>
      <title>Understanding asMSX Volume 2: lex.l</title>
      <link>http://www.gamerachan.org/fubu/dijkstra/2016-08-20-understanding-asmsx-volume-2-lex-l/</link>
      <pubDate>Fri, 19 Aug 2016 23:27:42 +0000</pubDate>
      
      <guid>http://www.gamerachan.org/fubu/dijkstra/2016-08-20-understanding-asmsx-volume-2-lex-l/</guid>
      <description>Welcome back to the mystery machine!
Today, the spooky lex.l. As we saw in the previous post this file is full with constants, but to be more precise this is the file where you tell how to treat every string found. In fact, constants are not defined in this file but in dura.y,
For example:
 “ld return MNEMO_LD”: Whenever you find a string that’s which characters ld, treat is as a token with value MNEMO_LD (Mnemotechnic for Load instruction).</description>
    </item>
    
    <item>
      <title>Understanding asMSX Volume 1: Understanding the structure of the code</title>
      <link>http://www.gamerachan.org/fubu/dijkstra/2016-08-17-understanding-asmsx-volume-1-understanding-the-structure-of-the-code/</link>
      <pubDate>Tue, 16 Aug 2016 23:00:08 +0000</pubDate>
      
      <guid>http://www.gamerachan.org/fubu/dijkstra/2016-08-17-understanding-asmsx-volume-1-understanding-the-structure-of-the-code/</guid>
      <description>Hello!
Welcome to another trip into another dark cave. Today we meet asMSX, an assembler for MSX’s Z80 made by Pitpan and bought and released with GPL license by cjv99 (Thanks!).
Motivation
It’s known that this assembler has some bugs, e.g. skipping IFDEFs when using MegaROM so there is an interest on knowing the internals of the code in order to fix this kind of bugs. My goal is not directly fixing bugs of this code but to provide more information about the code so all the people from the community may get themselves the code and fix it if there are any new bugs.</description>
    </item>
    
    <item>
      <title>On R and parallelism</title>
      <link>http://www.gamerachan.org/fubu/dijkstra/2016-03-24-on-r-and-parallelism/</link>
      <pubDate>Thu, 24 Mar 2016 01:20:01 +0000</pubDate>
      
      <guid>http://www.gamerachan.org/fubu/dijkstra/2016-03-24-on-r-and-parallelism/</guid>
      <description>R, that language that is has gained its momentum due to the people discovering the need of analyzing data. There are other several alternatives but this is my poison (or poisson!) of choice. In this post we will try to cover how to parallelize your R code with the package parallel.
 Why bother? One of my main concerns when I was starting with R is that “WOW! Everything runs in one thread!</description>
    </item>
    
  </channel>
</rss>
